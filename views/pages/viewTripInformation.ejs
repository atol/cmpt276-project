<!DOCTYPE html>
<html lang="en">

<head>
  <%- include ("../partials/header") %>

  <script type="text/javascript" src="../infoMapScript.js"></script>



  <link rel="stylesheet" href="../stylesheets/showTrip.css">
  <link rel="stylesheet" href="../stylesheets/infoMap.css">


  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"
    integrity="sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI"
    crossorigin="anonymous"></script>
  <script src="https://api.mapbox.com/mapbox-gl-js/v1.11.1/mapbox-gl.js"></script>
  <link href="https://api.mapbox.com/mapbox-gl-js/v1.11.1/mapbox-gl.css" rel="stylesheet" />

  <title>Trip Info!</title>
</head>

<body>
  <%- include ("../partials/nav_profile") %>


  <div id="mySidepanel" class="sidepanel">
    <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
    <img src="../image/defaultdp.png" width="50px" height="50px">
    <br>
    <a href="/dashboard"><button id="backHome" class="options">Back</button></a><br>
    <div id="travelInfo">
      <% rows.forEach(function (r) { %>
      <p id="Trip-Name" style="font-size: medium ;">Trip Name: <%= r.tripname %></p><br>
      <p id="start-date" style="font-size: medium ;">Start Date: <%=r.startdate %> </p> <br>
      <p id="end-date" style="font-size: medium ;">End Date: <%=r.enddate %></p><br>
      <p id="origin" style="font-size: medium ;">Origin: <%=r.origin %></p><br>
      <p id="destination" style="font-size: medium ;">Destination: <%=r.destination %></p><br>
      <p id="description" style="font-size: medium ;">Description: <%=r.description %></p><br>
      <button type="button" onclick="popup()" class=" options" data-toggle="modal" data-target="#exampleModal">
        Edit Trip
      </button>
      <form action="/deleteTrip/<%=r.trip_id%>" method="POST">
        <input class=" options" style="font-size: medium ;" type="submit" value="Delete">
      </form>
      <br><br><br>

      <%}); %>

    </div>
    <!--<a href="/addItineries"><button class="options">Add Itineries </button></a><br>-->
  </div>

  <button class="openbtn" onclick="openNav()">&#9776; Menu</button>



  <!--For Updating-->
  <div class="modal" id="myModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Trip Information</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <!-- <p>Modal body text goes here.</p> -->
          <form action="/edit" method="post">
            <div class="form-group">
              <label for="name">Trip Name*</label>
              <input type="text" class="form-control" name="tripname" required>
            </div>
            <div class="form-group">
              <label for="startDate">Start Date*</label>
              <input type="text" class="form-control" placeholder="MM/DD/YYYY" name="startdate" required>
            </div>
            <div class="form-group">
              <label for="endDate">End Date*</label>
              <input type="text" class="form-control" placeholder="MM/DD/YYYY" name="enddate" required>
            </div>
            <div class="form-group">
              <label for="local">Origin*</label>
              <input type="text" class="form-control" name="origin" required>
            </div>
            <div class="form-group">
              <label for="local">Destination*</label>
              <input type="text" class="form-control" name="destination" required>
            </div>
            <div class="form-group">
              <label for="description">Description</label>
              <input type="textarea" class="form-control" name="description">
            </div>
            <button type="submit" class="btn btn-primary">Edit Trip</button>
          </form>

        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>

        </div>
      </div>
    </div>
  </div>

  <div id="map"></div>
  <div class="overlay">
  </div>
  <script>
    function popup() {
      $('#myModal').modal('show')
    }
  </script>

  <script src="https://api.tiles.mapbox.com/mapbox.js/plugins/turf/v2.0.0/turf.min.js" charset="utf-8"></script>


  <script>
    mapboxgl.accessToken = 'pk.eyJ1IjoibXNjMjgiLCJhIjoiY2tkZTJpaWEyMWwzaTMxcGc4cjB1a3V3eSJ9.htLirZodkFX4l0mFDySW6g';
    var map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/streets-v11',
      center: [-96, 37.8],
      zoom: 3,
      // interactive: true
    });

    // San Fran
    //for(var i=0;i<length;i++){
    var origin = [parseFloat("<%=rows[0].originLongitude%>"), parseFloat("<%=rows[0].originLatitude%>")];
    var destination = [parseFloat("<%=rows[0].destLongitude%>"), parseFloat("<%=rows[0].destLatitude%>")];
    var length = parseInt("<%=rows.length%>")
    // A simple line from origin to destination.
    var route = {
      'type': 'FeatureCollection',
      'features': [ <% rows.forEach(function (r) { %>
      {
        'type': 'Feature',
        'geometry': {
          'type': 'LineString',
          'coordinates': [[parseFloat("<%=r.originLongitude%>"), parseFloat("<%=r.originLatitude%>")], [parseFloat("<%=r.destLongitude%>"), parseFloat("<%=r.destLatitude%>")]]
        }
      },<%}); %>
      ]
    };

    // A single point that animates along the route.
    // Coordinates are initially set to origin.
    var point = {
      'type': 'FeatureCollection',
      'features': [ <% rows.forEach(function (r) { %>
      {
        'type': 'Feature',
        'properties': {},
        'geometry': {
          'type': 'Point',
          'coordinates': [parseFloat("<%=r.originLongitude%>"), parseFloat("<%=r.originLatitude%>")]
        }
      },<%}); %>
      ]
    };

    var destpoint = {
      'type': 'FeatureCollection',
      'features': [ <% rows.forEach(function (r) { %>
      {
        'type': 'Feature',
        'properties': {},
        'geometry': {
          'type': 'Point',
          'coordinates': [parseFloat("<%=r.destLongitude%>"), parseFloat("<%=r.destLatitude%>")]
        }
      },<%}); %>
      ]
    };

    //for(int i=0;i<route.features.length)
    // Calculate the distance in kilometers between route start/end point.
    var lineDistance = turf.lineDistance(route.features[0], 'kilometers');
    /*
        var arc = [];
    
        // Number of steps to use in the arc and animation, more steps means
        // a smoother arc and animation, but too many steps will result in a
        // low frame rate
        var steps = 500;
    
        // Draw an arc between the `origin` & `destination` of the two points
        for (var i = 0; i < lineDistance; i += lineDistance / steps) {
          var segment = turf.along(route.features[0], i, 'kilometers');
          arc.push(segment.geometry.coordinates);
        }
    
        // Update the route with calculated arc coordinates
        route.features[0].geometry.coordinates = arc;
    
        // Used to increment the value of the point measurement against the route.
        var counter = 0;
    */
    map.on('load', function () {
      // Add a source and layer displaying a point which will be animated in a circle.
      map.addSource('route', {
        'type': 'geojson',
        'data': route
      });

      map.addSource('point', {
        'type': 'geojson',
        'data': point
      });

      map.addLayer({
        'id': 'route',
        'source': 'route',
        'type': 'line',
        'paint': {
          'line-width': 2,
          'line-color': '#007cbf'
        }
      });

      map.addLayer({
        'id': 'point',
        'source': 'point',
        'type': 'symbol',
        'layout': {
          'icon-image': 'airport-15',
          'icon-rotate': ['get', 'bearing'],
          'icon-rotation-alignment': 'map',
          'icon-allow-overlap': true,
          'icon-ignore-placement': true
        }
      });
      map.loadImage('https://upload.wikimedia.org/wikipedia/commons/d/d1/Black_circle.png',
        function (error, image) {
          if (error) throw error;
          map.addImage('finish', image);
          map.addSource('destpoint', {
            'type': 'geojson',
            'data': destpoint
          });
          map.addLayer({
            'id': 'destpoint',
            'source': 'destpoint',
            'type': 'symbol',
            'layout': {
              'icon-image': 'finish',
              'icon-size': 0.01,
              'icon-rotate': ['get', 'bearing'],
              'icon-rotation-alignment': 'map',
              'icon-allow-overlap': true,
              'icon-ignore-placement': true
            }
          })
        });

      /* 
 function animate() {
   // Update point geometry to a new position based on counter denoting
   // the index to access the arc.
   point.features[0].geometry.coordinates =
     route.features[0].geometry.coordinates[counter];

   // Calculate the bearing to ensure the icon is rotated to match the route arc
   // The bearing is calculate between the current point and the next point, except
   // at the end of the arc use the previous point and the current point
   point.features[0].properties.bearing = turf.bearing(
     turf.point(
       route.features[0].geometry.coordinates[
       counter >= steps ? counter - 1 : counter
       ]
     ),
     turf.point(
       route.features[0].geometry.coordinates[
       counter >= steps ? counter : counter + 1
       ]
     )
   );

   // Update the source with this new data.
   map.getSource('point').setData(point);

   // Request the next frame of animation so long the end has not been reached.
   if (counter < steps) {
     requestAnimationFrame(animate);
   }

   counter = counter + 1;
 }
 // Start the animation.
 animate(counter);*/
    });//}
  </script>


</body>

</html>